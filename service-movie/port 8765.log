
电影微服务
/****************************************************************************************
 一、电影微服务，也注册到 EurekaServer 中，通过 Http 协议访问已注册到生态圈中的用户微服务：

 1、启动 eureka-server 模块服务，启动1个端口；
 2、启动 service-user 模块服务，启动1个端口；
 3、启动 service-movie 模块服务，启动1个端口；
 4、在浏览器输入地址 http://localhost:7901/simple/1 可以看到信息成功的被打印出来，说明用户微服务正常；
 5、在浏览器输入地址 http://localhost:8761 并输入用户名密码 admin/admin 进入Eureka微服务显示在网页中，验证用户微服务、电影微服务确实注册到了 eureka 服务中；

 6、在浏览器输入地址http://localhost:8765/movie/1 可以看到用户信息成功的被打印出来；
 ****************************************************************************************/
 
 电影微服务整合Ribbon
/****************************************************************************************
 二、电影微服务，使用 application.yml 配置文件配置 Ribbon 在客户端进行负载均衡调度算法（测试随机分配服务器地址）：
 1、改造service-movie 添加依赖
		<dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-ribbon</artifactId>
        </dependency>
 2、在工程的启动类中,通过@EnableDiscoveryClient向服务中心注册；并且向程序的ioc注入一个bean: restTemplate;并通过@LoadBalanced注解表明这个restRemplate开启负载均衡的功能。       
   application.yml配置随机算法：service-user.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RandomRule；
 3、启动 service-user 模块服务，启动3个端口（7900、7899、7898）；
 4、启动 service-movie 模块服务，启动1个端口；
 5、在浏览器输入地址http://localhost:7901//movie/1，然后看看 service-user、service-user2 的各个对应的端口的服务打印的信息是否均匀，正常情况下应该是轮询分配打印的；

 总结：service-user（之所以随机是因为配置文件采用 RandomRule 随机调度算法）、service-user2（之所以轮询是因为没有任何配置，默认调度算法就是轮询算法）
 ****************************************************************************************/